import java.nio.file.Files
import java.util.stream.Collector

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
}

def TRELLIS = "/usr/share/trellis"
def PROJ = "ecp5_reference"
def PIN_DEF = "ecp5_5g_eval.lpf"
def DEVICE = "um5g-85k"
def FREQ_TARGET = "110"

dependencies {
}

task build {
}

void splitHexfile(String file) {
  String code = Files.readString(new File(file).toPath())
  List<String> words = code.split("[ \n]")
  StringBuilder a = new StringBuilder(words.size() * 4)
  StringBuilder b = new StringBuilder(words.size() * 4)
  List<String> filtered = new ArrayList<>(words.size());
  for (String word : words) {
    if (!word.isBlank()) {
      filtered.add(word)
    }
  }
  words = filtered
  for (int i = 0; i < words.size(); i++) {
    String word = words.get(i).trim()
    if (i % 2 == 0) {
      a.append(word).append(" ")
    } else {
      b.append(word).append(" ")
    }

    if (i > 0 && i % 16 == 0) {
      a.append("\n")
      b.append("\n")
    }
  }

  Files.writeString(new File((String)(file + ".a.hex")).toPath(), a)
  Files.writeString(new File((String)(file + ".b.hex")).toPath(), b)
}

def verilogFiles(String dir) {
  def names = []
  fileTree(dir).visit { FileVisitDetails details ->
    if (details.file.name.endsWith(".v") && !details.file.name.endsWith("pll.v")) {
      names << details.file.path
    }
  }
  return names
}

task buildHexFile() {
  splitHexfile("prog.hex")
}

task synth(type:Exec) {
  def names = ["top.v"]
  fileTree("src").visit { FileVisitDetails details ->
    if (details.file.name.endsWith(".v")) {
      names << details.file.path
    }
  }

  def command = ["yosys", "-p", "synth_ecp5 -json ${PROJ}.json -top top"]

  commandLine((List<String>) (command + names))
}

task pnr(type:Exec) {
  dependsOn 'synth'
  def command = [
      "nextpnr-ecp5",
      "--json",
      "${PROJ}.json",
      "--lpf",
      PIN_DEF,
      "--textcfg",
      "${PROJ}_out.config",
      "--${DEVICE}",
      "--freq",
      FREQ_TARGET,
      "--timing-allow-fail",
      "--package",
      "CABGA381",
      "--speed",
      "8"
  ]
  commandLine(command)
}

task pack(type:Exec) {
  dependsOn 'pnr'
  def command = [
      "ecppack",
      "--svf-rowsize",
      "100000",
      "--svf",
      "${PROJ}.svf",
      "${PROJ}_out.config",
      "${PROJ}.svf"
  ]
  commandLine(command)
}
tasks.named('build') { dependsOn('pack') }

task program(type:Exec) {
  dependsOn 'pack'
  def command = [
      "openocd",
      "-f",
      "${TRELLIS}/misc/openocd/ecp5-evn.cfg",
      "-c",
      "transport select jtag; init; svf ${PROJ}.svf; exit"
  ]
  commandLine(command)
}

task test(type:Exec) {
  def testFiles = verilogFiles("test")
  def verilogFiles = verilogFiles("src")
  testFiles.forEach(fileName -> {
    List<String> iverilogCommand = [
        "iverilog",
        "-o",
        "${fileName}.out",
        "test/defines.v"
    ] + verilogFiles
    String command = String.join(" ", iverilogCommand)
    commandLine(iverilogCommand)

    def resultsCommand = [
        "sh",
        "-c",
        "vvp ${fileName}.out > ${fileName}.results"
    ]
    commandLine(resultsCommand)

    def checkCommand = [
        "sh",
        "-c",
        "if grep \"ASSERTION FAILED\" ${fileName}.results; " +
            "then echo \"Tests failed - ${fileName}\"; echo \"Run 'vvp ${fileName}.out' for results\"; exit 1; " +
            "else echo \"Tests passed - ${fileName}\"; " +
            "fi"
    ]
    commandLine(checkCommand)
  })
}

task clean(type:Exec) {
  def command = [
      "rm",
      "-f",
      "${PROJ}.json",
      "${PROJ}_out.config",
      "${PROJ}.svf",
      "**/*.v.iverilog*"
  ]
  commandLine(command)
}
