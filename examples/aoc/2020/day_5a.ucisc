# https://adventofcode.com/2020/day/5
#
# To run, you'll need to setup uCISC emulator or hardware
# and a serial interface. See the README for details.
#
# Once `ucisc` is setup:
# 1. Create a text file with the input content
#
# 2. Run
#    ucisc -e -r=<input.txt> -t=<port> \
#    examples/aoc/2020/day_5a.ucisc \
#    app/lib/numbers.ucisc \
#    app/lib/string_serial.ucisc \
#    app/lib/strings.ucisc

def stack/r1 <- copy val/0

var val.seatMap/1024
var val.bufferStart/2048
var val.bufferLen/32768
var val.echoOn/0
var val.serialDevice/32

def str/r2
var str.char/0

def seatMap/r3
var seatMap.occupied/0

# User registers to copy buffer values, immediate is too small otherwise
&r2 <- copy val.bufferLen
&r3 <- copy val.bufferStart
stack.readBuffer(&r3, &r2, val.echoOn, val.serialDevice)
stack.printLine(pc/parsingData, val.serialDevice)

&r2 <- copy val.bufferStart
var stack.currentPos/0 push <- copy &r2
{
    stack.findEndOfWhitespace(stack.currentPos) -> nextStart
    stack.currentPos <- copy stack.nextStart
    &r2 <- copy stack.nextStart pop

    &str <- copy stack.currentPos
    str.char <~ sub val/0
    pc <0? copy pc/break


    stack.parseBinarySpaceTree(stack.currentPos, val/128, val/66) -> number
    stack.currentPos <- add val/7

    stack.parseBinarySpaceTree(stack.currentPos, val/8, val/82) -> columnNumber
    stack.currentPos <- add val/3

    stack.number <- shl val/3
    stack.number <- add stack.columnNumber
   
    &seatMap <- copy val.seatMap
    &seatMap <- add stack.number
    seatMap <- copy val/1

    &r2 <- copy stack.number pop
    pc <- copy pc/loop
}

&seatMap <- copy val.seatMap
{
    seatMap.occupied <~ or seatMap.occupied
    pc <!? copy pc/break

    &seatMap <- copy &seatMap/1
    pc <- copy pc/loop
}
{
    seatMap.occupied <~ or seatMap.occupied
    pc <0? copy pc/break

    &seatMap <- copy &seatMap/1
    pc <- copy pc/loop
}

&seatMap <- sub val.seatMap
stack.printChar(val/13, val.serialDevice)
stack.printNumber(&seatMap, val.serialDevice)
stack.printLine(pc/yourSeat, val.serialDevice)

pc <- copy pc/0

readingData: "Reading seating data..."
parsingData: "Parsing seating data..."
yourSeat: " is your seat number."

fun stack.parseBinarySpaceTree(str, maxValue, bChar) -> number {
    var stack.bitFlag/0 push <- copy stack.maxValue
    stack.bitFlag <- shr val/1
    stack.number <- copy val/0
    {
        stack.bitFlag <~ sub val/0
        pc <0? copy pc/break

        &str <- copy stack.str
        {
            str.char <~ sub stack.bChar
            pc <!? copy pc/break
            stack.number <- add stack.bitFlag
        }

        stack.str <- add val/1
        stack.bitFlag <- shr val/1
        pc <- copy pc/loop
    }
    pc <- copy stack.return pop
}

