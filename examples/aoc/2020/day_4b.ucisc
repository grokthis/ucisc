# https://adventofcode.com/2020/day/4
#
# To run, you'll need to setup uCISC emulator or hardware
# and a serial interface. See the README for details.
#
# Once `ucisc` is setup:
# 1. Create a text file with the input content
#
# 2. Run
#    ucisc -e -r=<input.txt> -t=<port> \
#    examples/aoc/2020/day_4b.ucisc \
#    app/lib/numbers.ucisc \
#    app/lib/string_serial.ucisc \
#    app/lib/strings.ucisc

def stack/r1 <- copy val/0

var val.bufferStart/1536
var val.bufferLen/32768
var val.echoOn/0
var val.serialDevice/32

var val.patternWidth/31
var val.lineWidth/32

def buffer/r2
var buffer.char/0

var stack.valid/0 push <- copy val/0

&r2 <- copy val.bufferLen
stack.readBuffer(val.bufferStart, &r2, val.echoOn, val.serialDevice)
stack.printLine(pc/parsingData, val.serialDevice)

var stack.byr/0 push <- copy val/0
var stack.iyr/0 push <- copy val/0
var stack.eyr/0 push <- copy val/0
var stack.hgt/0 push <- copy val/0
var stack.hcl/0 push <- copy val/0
var stack.ecl/0 push <- copy val/0
var stack.pid/0 push <- copy val/0
var stack.currentPos/0 push <- copy val.bufferStart

{
    stack.detectNewline(stack.currentPos) -> cCount
    stack.currentPos <- add stack.cCount
    stack.detectNewline(stack.currentPos) -> c2Count
    {
        pc <0? copy pc/break

        stack.currentPos <- add stack.c2Count
        # Reset all the vars
        stack.byr <- copy val/0
        stack.iyr <- copy val/0
        stack.eyr <- copy val/0
        stack.hgt <- copy val/0
        stack.hcl <- copy val/0
        stack.ecl <- copy val/0
        stack.pid <- copy val/0
    }
    &r2 <- copy stack.cCount pop

    stack.findEndOfWhitespace(stack.currentPos) -> nextStart
    stack.currentPos <- copy stack.nextStart

    {
        stack.stringStartsWith(stack.currentPos, pc/byr)
        pc <!? copy pc/break

        stack.currentPos <- add val/4
        stack.isValidNumber(stack.currentPos, val/4, val/1920, val/2002)

        stack.byr <!? copy val/1
    }
    {
        stack.stringStartsWith(stack.currentPos, pc/iyr)
        pc <!? copy pc/break

        stack.currentPos <- add val/4
        stack.isValidNumber(stack.currentPos, val/4, val/2010, val/2020)

        stack.iyr <!? copy val/1
    }
    {
        stack.stringStartsWith(stack.currentPos, pc/eyr)
        pc <!? copy pc/break

        stack.currentPos <- add val/4
        stack.isValidNumber(stack.currentPos, val/4, val/2020, val/2030)

        stack.eyr <!? copy val/1
    }
    {
        stack.stringStartsWith(stack.currentPos, pc/hgt)
        pc <!? copy pc/break

        stack.currentPos <- add val/4
        stack.isValidHeight(stack.currentPos)

        stack.hgt <!? copy val/1
    }
    {
        stack.stringStartsWith(stack.currentPos, pc/hcl)
        pc <!? copy pc/break

        stack.currentPos <- add val/4
        stack.isValidHairColor(stack.currentPos)

        stack.hcl <!? copy val/1
    }
    {
        stack.stringStartsWith(stack.currentPos, pc/ecl)
        pc <!? copy pc/break

        stack.currentPos <- add val/4
        stack.isValidEyeColor(stack.currentPos)

        stack.ecl <!? copy val/1
    }
    {
        stack.stringStartsWith(stack.currentPos, pc/pid)
        pc <!? copy pc/break

        stack.currentPos <- add val/4
        stack.isNumber(stack.currentPos, val/9)

        stack.pid <!? copy val/1
    }

    stack.findWhitespace(stack.currentPos) -> whitePos
    stack.currentPos <- copy stack.whitePos

    var stack.count/0 push <- copy val/0
    stack.count <- add stack.byr
    stack.count <- add stack.iyr
    stack.count <- add stack.eyr
    stack.count <- add stack.hgt
    stack.count <- add stack.hcl
    stack.count <- add stack.ecl
    stack.count <- add stack.pid

    stack.count <~ sub val/7
    {
        pc <!? copy pc/break
        stack.valid <- add val/1
        # Reset the vars so we don't double count if cid still remains
        stack.byr <- copy val/0
        stack.iyr <- copy val/0
        stack.eyr <- copy val/0
        stack.hgt <- copy val/0
        stack.hcl <- copy val/0
        stack.ecl <- copy val/0
        stack.pid <- copy val/0
    }

    &r2 <- copy stack.nextStart pop
    &r2 <- copy stack.currentPos

    r2/0 <~ sub val/3
    pc <0 copy pc/break

    pc <- copy pc/loop

    byr: "byr:"
    iyr: "iyr:"
    eyr: "eyr:"
    hgt: "hgt:"
    hcl: "hcl:"
    ecl: "ecl:"
    pid: "pid:"
}

stack.printChar(val/13, val.serialDevice)
stack.printNumber(stack.valid, val.serialDevice)
stack.printLine(pc/validPassports, val.serialDevice)

pc <- copy pc/0

readingData: "Reading passport data..."
parsingData: "Parsing passport data..."
validPassports: " valid passports."

fun stack.findEndOfWhitespace(readStart) -> nextStart {
    var stack.found/0 push <- copy val/0
    &r2 <- copy stack.readStart
    {
        stack.found <- copy val/0

        r2 <~ sub val/3
        pc <0? copy pc/break

        r2 <~ sub val/32
        stack.found <0? copy val/1

        r2 <~ sub val/10
        stack.found <0? copy val/1

        r2 <~ sub val/13
        stack.found <0? copy val/1

        stack.found <~ sub val/1
        pc <!? copy pc/break

        &r2 <- copy &r2/1
        pc <- copy pc/loop
    }

    stack.nextStart <- copy &r2
    pc <- copy stack.return pop
}

fun stack.findWhitespace(readStart) -> nextStart {
    &r2 <- copy stack.readStart
    {
        r2 <~ sub val/3
        pc <0? copy pc/break

        r2 <~ sub val/10
        pc <0? copy pc/break

        r2 <~ sub val/13
        pc <0? copy pc/break
        
        r2 <~ sub val/32
        pc <0? copy pc/break

        &r2 <- copy &r2/1
        pc <- copy pc/loop
    }

    stack.nextStart <- copy &r2
    pc <- copy stack.return pop
}

fun stack.isValidEyeColor(currentPos) {
    var stack.valid/0 push <- copy val/0
    {
        stack.stringStartsWith(stack.currentPos, pc/amb)
        pc <!? copy pc/break

        stack.valid <- copy val/1
    }
    {
        stack.stringStartsWith(stack.currentPos, pc/blu)
        pc <!? copy pc/break

        stack.valid <- copy val/1
    }
    {
        stack.stringStartsWith(stack.currentPos, pc/brn)
        pc <!? copy pc/break

        stack.valid <- copy val/1
    }
    {
        stack.stringStartsWith(stack.currentPos, pc/gry)
        pc <!? copy pc/break

        stack.valid <- copy val/1
    }
    {
        stack.stringStartsWith(stack.currentPos, pc/grn)
        pc <!? copy pc/break

        stack.valid <- copy val/1
    }
    {
        stack.stringStartsWith(stack.currentPos, pc/hzl)
        pc <!? copy pc/break

        stack.valid <- copy val/1
    }
    {
        stack.stringStartsWith(stack.currentPos, pc/oth)
        pc <!? copy pc/break

        stack.valid <- copy val/1
    }

    stack.currentPos <- add val/3
    {
        stack.isWhitespaceChar(stack.currentPos)
        pc <!? copy pc/break

        stack.valid <- copy val/0
    }

    stack.valid <~ or stack.valid
    pc <- copy stack.return pop

    amb: "amb"
    blu: "blu"
    brn: "brn"
    gry: "gry"
    grn: "grn"
    hzl: "hzl"
    oth: "oth"
}

fun stack.isValidHairColor(currentPos) {
    var stack.valid/0 push <- copy val/0
    def str/r2 <- copy stack.currentPos
    {
        str/0 <~ sub val/35
        pc <!? copy pc/break

        stack.valid <- copy val/1
        stack.currentPos <- add val/1
    }

    var stack.count/0 push <- copy val/0
    {
        stack.isHexChar(stack.currentPos)
        pc <0? copy pc/break

        stack.currentPos <- add val/1
        stack.count <- add val/1

        pc <- copy pc/loop
    }
    {
        stack.isWhitespaceChar(stack.currentPos)
        pc <0? copy pc/break

        stack.count <~ sub val/6
        pc <!? copy pc/break

        stack.valid <- add val/1
    }

    stack.valid <~ or stack.valid
    pc <0? copy stack.return pop

    stack.valid <~ sub val/1 # if 2, will still be 1 and say its valid
    pc <- copy stack.return pop
}

fun stack.isValidHeight(currentPos) {
    var stack.valid/0 push <- copy val/0
    {
        stack.isValidNumber(stack.currentPos, val/3, val/150, val/193)
        pc <0? copy pc/break
        
        stack.currentPos <- add val/3
        stack.stringStartsWith(stack.currentPos, pc/cm)
        pc <!? copy pc/break

        stack.valid <- copy val/1
    }
    {
        stack.isValidNumber(stack.currentPos, val/2, val/59, val/76)
        pc <0? copy pc/break

        stack.currentPos <- add val/2
        stack.stringStartsWith(stack.currentPos, pc/in)
        pc <!? copy pc/break

        stack.valid <- copy val/1
    }

    stack.valid <~ or stack.valid
    pc <- copy stack.return pop

    cm: "cm"
    in: "in"
}

fun stack.isNumber(currentPos, digits) {
    var stack.count/0 push <- copy val/0
    var stack.valid/0 push <- copy val/0
    {
      stack.isNumberChar(stack.currentPos)
      pc <0? copy pc/break

      stack.currentPos <- add val/1
      stack.count <- add val/1

      pc <- copy pc/loop
    }

    {
        stack.isWhitespaceChar(stack.currentPos)
        pc <0? copy pc/break

        stack.count <~ sub stack.digits
        pc <!? copy pc/break

        stack.valid <- copy val/1
    }

    stack.valid <~ or stack.valid
    pc <- copy stack.return pop
}

fun stack.isValidNumber(currentPos, digits, min, max) {
    var stack.count/0 push <- copy val/0
    var stack.valid/0 push <- copy val/0
    var stack.number/0 push <- copy val/0
    {
      stack.isNumberChar(stack.currentPos)
      pc <0? copy pc/break

      stack.currentPos <- add val/1
      stack.count <- add val/1

      pc <- copy pc/loop
    }

    {
        #stack.isWhitespaceChar(stack.currentPos)
        #pc <0? copy pc/break

        stack.count <~ sub stack.digits
        pc <!? copy pc/break

        stack.currentPos <- sub stack.count
        stack.parseNumber(stack.currentPos) -> num
        stack.number <- copy stack.num
        &r2 <- copy stack.num pop

        stack.number <~ sub stack.min
        pc <n? copy pc/break

        stack.number <~ sub stack.max
        pc <p? copy pc/break

        stack.valid <- copy val/1
    }

    stack.valid <~ or stack.valid
    pc <- copy stack.return pop
}

fun stack.isWhitespaceChar(currentPos) {
    var stack.valid/0 push <- copy val/0
    def str/r2 <- copy stack.currentPos
    {
        str/0 <~ sub val/9
        stack.valid <0? copy val/1

        str/0 <~ sub val/10
        stack.valid <0? copy val/1

        str/0 <~ sub val/13
        stack.valid <0? copy val/1

        str/0 <~ sub val/32
        stack.valid <0? copy val/1
    }
    stack.valid <~ or stack.valid
    pc <- copy stack.return pop
}

fun stack.isNumberChar(currentPos) {
    var stack.valid/0 push <- copy val/0
    def str/r2 <- copy stack.currentPos
    {
        str/0 <~ sub val/48
        pc <n? copy pc/break

        str/0 <~ sub val/57
        pc <p? copy pc/break

        stack.valid <- copy val/1
    }
    stack.valid <~ or stack.valid
    pc <- copy stack.return pop
}

fun stack.isHexChar(currentPos) {
    var stack.valid/0 push <- copy val/0
    def str/r2 <- copy stack.currentPos
    {
        str/0 <~ sub val/48
        pc <n? copy pc/break

        str/0 <~ sub val/57
        pc <p? copy pc/break

        stack.valid <- copy val/1
    }
    {
        str/0 <~ sub val/97
        pc <n? copy pc/break

        str/0 <~ sub val/102
        pc <p? copy pc/break

        stack.valid <- copy val/1
    }
    stack.valid <~ or stack.valid
    pc <- copy stack.return pop
}

pc <- copy pc/0
